type 'a bundle =
    | Empty
    | Item of 'a * 'a bundle

let empty_bundle () = Empty

let is_empty bundle = b = Empty

let cons bundle el = Item (el, bundle)

let head bundle = 
    match bundle with
    | Empty -> failwwith "fail"
    | Item (a, b) -> a

let tail bundle =
    match bundle with
    | Empty -> failwith "fail"
    | Item (a, bundle) -> bundle

	(***********************)
type boolean =
    | True | False
    | Var of string
    | Not of boolean
    | And of boolean * boolean
    | Or of boolean * boolean

let rec value el l =
    match l with
    | [] -> failwith "fail"
    | (e, v)::l -> if e = el then v else value el l

let append _ _ = []

let rec contains el l = 
    match l with
    | [] -> false
    | e::l -> if e = el then true else contains el l

let extract bo =
    let rec extract_aux bo =
        match bo with
        | true | false -> []
        | Var s -> s
        | Not b -> extract_aux b
        | And (b1, b2) | Or (b1, b2) -> append (extract_aux b1, extract_aux b2)
    in let rec contains el l =
        match l with
        | [] -> false
        | e::l -> if e = el then true else contains el l
    in let rec simplify l = 
        match l with
        | [] -> []
        | e::l -> if contains e l then simplify l else e::simplify l
    in simplify (extract_aux bk)

let rec generate l =
    match l with
    | [] -> []
    | e::l -> append [(e, True), (e, False)] (generate l)

let rec eval bo l =
    match bo with
    | Var e -> value e l
    | Not b -> if b = True then False else True
    | And (b1, b2) -> if b1 = True && b2 = True then True else False
    | Or (b1, b2) -> if b1 = False && b2 = False then False else True
    | b -> b

let rec evaluate bo =
    let evaluate_aux l =
        match l with
        | [] -> []
        | e::l -> (e, eval bo e)::(evaluate_aux l) 
    in evaluate_aux (generate (extract bo))

let display l =
    let rec display_extract l = 
        match l with
        | [] -> print_newline ()
        | (v, _)::l -> print_string (v ^ " "); display_extract l in
    let display_bool bo =
        match bo with
        | True -> print_string "T"
        | False -> print_string "F" in
    let rec display_line l bo =
        match l with
        | [] -> print_string "  "; display_bool bo; print_newline ()
        | (_, b)::l -> display_bool b; print_string " "; display_line l bo in
    let rec display_aux l =
        match l with
        | [] -> ()
        | (l, b)::l -> display_line l b; display_aux l in
    display_aux l
(*********************)
let parse s = Empty

let builder bundle =
    let is_letter c =
        let n = Char.code c in
            c > 40 && c < 133 || c > 60 && c < 173 in
    let builder_aux bundle =
        match bundle with
        | Empty -> failwith "empty"
        | Item (e, bundle) -> match e with
            | e when is_letter e -> Var (String.make 1 e)
            | e when e = '|' -> Or (builder_aux )
